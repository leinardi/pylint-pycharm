/*
 * Copyright 2018 Roberto Leinardi.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.commonmark.node.Node
import org.commonmark.parser.Parser
import org.commonmark.renderer.html.HtmlRenderer
import se.bjurr.violations.comments.github.plugin.gradle.ViolationCommentsToGitHubTask

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.atlassian.commonmark:commonmark:0.17.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'org.jetbrains.intellij' version '1.17.4'
    id 'net.ltgt.errorprone' version '4.0.1'
    id 'idea'
    id 'java'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'se.bjurr.violations.violation-comments-to-github-gradle-plugin' version '1.70.0'
}

checkstyle {
    ignoreFailures = false // Whether this task will ignore failures and continue running the build.
    configFile rootProject.file('config/checkstyle/checkstyle.xml')
    // The Checkstyle configuration file to use.
    toolVersion = '9.1' // The version of Checkstyle you want to be used
}

def hasPycharmPath = project.hasProperty('pycharmPath')
def props = new Properties()
rootProject.file('src/main/resources/com/leinardi/pycharm/pylint/PylintBundle.properties')
        .withInputStream {
            props.load(it)
        }

gradle.projectsEvaluated {
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    }
}

group 'com.leinardi.pycharm'
version version

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

intellij {
    version = ideVersion
    pluginName = props.getProperty('plugin.name').toLowerCase().replace(' ', '-')
    downloadSources = Boolean.valueOf(downloadIdeaSources)
    updateSinceUntilBuild = true
    if (hasPycharmPath) {
        alternativeIdePath = pycharmPath
    }
    plugins = [pythonPlugin]
}

runIde {
    systemProperties.put("idea.log.debug.categories", "#com.leinardi.pycharm.mypy")
    // Log verbose information when dynamic plugin unloading fails
    systemProperties.put("ide.plugins.snapshot.on.unload.fail", "true")
}

// Causes error popup when building while sandbox IDE is open. Disable in development
if (System.getenv('DEVELOP')) {
    buildSearchableOptions.enabled = false
}

patchPluginXml {
    version = project.property('version')
    sinceBuild = project.property('sinceBuild')
    untilBuild = project.property('untilBuild')
    pluginDescription = props.getProperty('plugin.Pylint-PyCharm.description')
    changeNotes = getChangelogHtml()
}

publishPlugin {
    def publishToken = project.hasProperty('jetbrainsPublishToken') ? jetbrainsPublishToken : ""
    token.set(publishToken)
    channels = [publishChannels]
}

repositories {
    mavenCentral()
    gradlePluginPortal()
    if (hasPycharmPath) {
        flatDir {
            dirs "$pycharmPath/lib"
        }
    }
}

dependencies {
    if (hasPycharmPath) {
        compileOnly name: 'pycharm'
    }
    implementation 'com.squareup.moshi:moshi:1.14.0'
    errorprone 'com.google.errorprone:error_prone_core:2.21.1'
}

def getChangelogHtml() {
    Parser parser = Parser.builder().build()
    Node document = parser.parseReader(rootProject.file('CHANGELOG.md').newReader())
    HtmlRenderer renderer = HtmlRenderer.builder().build()
    renderer.render(document.firstChild.next)
}

check.dependsOn(verifyPlugin)

task violationCommentsToGitHub(type: ViolationCommentsToGitHubTask) {
    repositoryOwner = "leinardi"
    repositoryName = "pylint-pycharm"
    pullRequestId = System.properties['GITHUB_PULLREQUESTID']
    oAuth2Token = System.properties['GITHUB_OAUTH2TOKEN']
    gitHubUrl = "https://api.github.com/"
    createCommentWithAllSingleFileComments = false
    createSingleFileComments = true
    commentOnlyChangedContent = true
    violations = [
            ["FINDBUGS", ".", ".*/reports/findbugs/.*\\.xml\$", "Findbugs"],
            ["CHECKSTYLE", ".", ".*/reports/checkstyle/.*debug\\.xml\$", "Checkstyle"],
            ["ANDROIDLINT", ".", ".*/reports/lint-results.*\\.xml\$", "Android Lint"],
            ["GOOGLEERRORPRONE", ".", ".*/build.log\$", "Error Prone"]
    ]
}

wrapper {
    gradleVersion = "8.2.1"
    distributionType = Wrapper.DistributionType.ALL
}
